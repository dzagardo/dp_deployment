datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id              String       @id @default(cuid())
  email           String       @unique
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  password        Password?
  notes           Note[]
  role            String?
  userDatasets    UserDataset[]   // Relation to UserDataset
  encryptedToken  String?         // Store the encrypted OAuth access token
  encryptedRefreshToken String?   // Store the encrypted OAuth refresh token
}


model Password {
  hash   String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Note {
  id        String   @id @default(cuid())
  title     String
  body      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String
}

// Updated Dataset model without user relation
model Dataset {
  id            String       @id @default(cuid())
  fileName      String       // name
  filePath      String       // file path
  fileType      String       @default("csv")
  privacyBudget Float        @default(0) // privacy_budget
  totalQueries  Int          @default(0) // Total number of queries performed on this dataset
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  userDatasets  UserDataset[] // Relation to UserDataset
}

// New junction table for User-Dataset many-to-many relationship
model UserDataset {
  id        String   @id @default(cuid())
  userId    String
  datasetId String
  role      String?  // Optional: You can store specific roles or permissions for this relationship

  user      User     @relation(fields: [userId], references: [id])
  dataset   Dataset  @relation(fields: [datasetId], references: [id])

  @@unique([userId, datasetId]) // Ensure each user-dataset pair is unique
}
